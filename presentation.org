
* Thinking Programs

** A Lisp Adventure

*** And a farewell gift


* Chapter I: A Remembrance

* A whirlwind tour

Let's remember Clojure: it barely has syntax

#+begin_src clojure :results output

;; values are values
5
nil
"Hi there"

;; vectors and maps (look ma, no commas!)
[1 2 3 4]
{:hello "maps" :with "keys" :and "values"}

;; and of course lists
'(4 3 2 1)

;; immutable data structures: operations return new ones
;; implemented as persistent, shared data structures
(def m {:name "Luis" :hobbies []})
(assoc m :hobbies ["Sports" "Socializing"])
m
(dissoc m :name)
m


;; expressions evaluate to values
(+ 1 1)
(if true "truth" "lies")
(conj  [1 2 3 4] 5)
(conj '(4 3 2 1) 5)

;; functions are easy
(defn flip [a b] 
  (vector b a)) 

(flip :x :y)

;; anonymous functions can be neat:
(#(vector %2 %1) :x :y)

;; destructuring is cool (use a vector or map in an assignment scenario)
((fn flip2 [[a b & _]] (vector b a)) [:x :y :z])
((fn greet! [{name :name}] (str "Hello " name)) {:name "Luis" :age 666})

;; scoping is lexical
(let [x 2
      y 3]
 (Math/pow x y))

;; functional approach to sequence stuff:

(reduce + (filter even? (range 1 10)))

;; laziness in sequences:

(take 5 (iterate inc 1))

;; macros aren't scary
(defmacro infix [a op b] 
  `(~op ~a ~b)) ;; ` = quasiquote; ~ = unquote
(macroexpand '(infix 2 - 1))
(infix 1 + 2)
(infix 1 + (infix 2 + 2))


#+end_src





* A restatement of values

- The ideal of functional programming is to reflect the form of the solution. To /declare/ it.
- That is, to be unencumbered by the /how/ and express the /what/.
- Sometimes this means exploring paradigms beyond, or beneath (underlying), programming.
- An example, if we have time: Sudoku.


* Chapter II: Old words, new tricks

* Ground terms

- A /variable/ is an ambiguous "thing" that can be anything (have any value)
- Once we learn more about the *closed world* of the variable, we may learn its value.
- A goal is a pattern or a relation with variables (unknowns). To /satisfy/ a goal is to find values that make it true.
- To /unify/ is to see if a term (rule/pattern) can be made equal to another (have the same set of values)
- To /run/ a logic program is to find values that make all of its goals true. The basis of finding this is *unification*


* A simple implementation 

[[file:src/sentient_brown_bag/minilogic.clj][A little tour of some code]]




* Chapter III: A new abstraction

*  A less tumultuous tour

#+begin_src clojure :results output

(require '[clojure.core.logic :as l])

;; == is core.logic's unify
;; run* can be seen as an improved "satisfy": takes variables
;; and logic expressions, returns the values the variables could take
;; to satisfy the expressions
(l/run* [answer]
  (l/== answer 5))

(l/run* [x y]
  (l/== [1 x 3] [1 2 y]))

;; this is a "conjunction": all expressions in `run`
;; are "goals" to be satisfied
(l/run* [x y]
  (l/== x y)
  (l/== x 1))

;; it's powerful enough to look into any data structure
(l/run* [q]
  (l/== {:a q :b 2} {:a 1 :b 2}))

;; returns two "raw" logic variables. Notice that they're the same, which
;; is the engine's way of saying "I need more info, but I do know they should be the same"
(l/run* [x y]
  (l/== x y))

;; there's some more exciting operations, of course:

(l/run* [q]
  (l/membero q [1 2 3]))

(l/run* [q]
  (l/membero q [1 2 3])
  (l/membero q [3 4 5]))

;; there's also a disjunction: you can introduce many possible branches
;; and it'll return the ones that succeed:

(l/run* [q]
  (l/conde
    [(l/== q 1)]
    [(l/== q 2)]))

(l/run* [q]
  (l/conde
    [(l/== q 1) (l/== q 3)]
    [(l/== q 2)]))

;; lastly, some lisp-ness

(cons 0 [1 2 3])

(l/run* [q]
  (l/conso 1 [2 3] q))

(l/run* [q]
  (l/conso 1 q [1 2 3]))

(l/run* [q]
  (l/conso q [2 3] [1 2 3]))

(l/run* [q]
  (l/conso 1 [2 q] [1 2 3 4]))

;; that is, in logic programming you define operations with the result
;; as part of the terms, which means you can ask them questions about
;; any term, not just the result! Here's some magic:

(l/run* [x y]
  (l/appendo x y [1 2 3 4]))

#+end_src clojure

* A review

In the relational paradigm, we think about relations between terms, and to program is to define relations in terms of... other relations; ultimately seeking unification.

#+begin_src clojure

;; Now we can define some user-level goals for sequences. First, conso says that out is the sequence with the head first and the tail rest.
(defn conso [first rest out]
  (if (lvar? rest)
    (=== [first dot rest] out)
    (=== (cons first rest) out)))

;; firsto simply says that first is the head of out.
(defn firsto [first out]
  (fresh [rest]
    (conso first rest out)))

;;And resto, likewise, says that rest is the tail of out.
(defn resto [rest out]
  (fresh [first]
    (conso first rest out)))

;;emptyo is a way to say that s must be an empty sequence.
(defn emptyo [s]
  (=== '() s))

;;appendo says that out is the result of appending the sequence parameters seq1 and seq1.
(defn appendo [seq1 seq2 out]
  (conde
    [(emptyo seq1) (=== seq2 out)]
    [(fresh [first rest rec]
       (conso first rest seq1)
       (conso first rec out)
       (appendo rest seq2 rec))]))

#+end_src

* Implementation

To implement a "solver", is to recursively walk a set of goals accruing knowledge, until we reach a set of values, or fail.

This is usually done with "interleaved search" of "lazy streams": each recursive iteration puts a new "thunk" in a stream,
and only realizes it if needed. When streams are merged, they "trampoline" between each other. One can have goals that on their own could have a contradiction, or infinite solutions (a goal with no solutions simply terminates the search!) but adding other goals can limit the space.

To see a much much better explanation, see [[http://mullr.github.io/micrologic/literate.html][This implementation of miniKanren in Clojure]], or [[http://webyrd.net/scheme-2013/papers/HemannMuKanren2013.pdf][This paper describing microKanren, a 39-line fully-implemented unification engine]]


* Chapter IV: A Statement of Facts

[[file:src/sentient_brown_bag/birchbox.clj][Another little code tour]]

* Epilogue: Further Reading

- [[https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-29.html#%_sec_4.4][SICP, Chapter 4, Section 4: Logic Programming]]
- [[https://www.oreilly.com/library/view/the-joy-of/9781617291418/kindle_split_034.html][The Joy of Clojure: Chapter 16: "Thinking Programs"]]
- [[https://github.com/joyofclojure/book-source/tree/master/src/clj/joy/logic][The Joy of Clojure source code for Chapter 16's code samples]]
- [[https://mitpress.mit.edu/books/reasoned-schemer-second-edition][The Reasoned Schemer ($)]]
- [[http://minikanren.org/][Implementations of miniKanren in a bunch of languages]]
- [[https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer][The core.logic wiki: a primer]]
- [[https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer][The core.logic wiki: feature tour]]
- [[https://www.youtube.com/watch?v=5vtC7WEN76w][A simply amazing video by the author of The Reasoned Schemer]]
- [[http://webyrd.net/scheme-2013/papers/HemannMuKanren2013.pdf][MicroKanren paper]] and [[https://github.com/jasonhemann/microKanren/blob/master/microKanren.scm][Source]]
- [[https://github.com/frenchy64/Logic-Starter/wiki][A very good introduction to logic programming with Clojure]]
- [[http://mullr.github.io/micrologic/literate.html][A Clojure implementation of microKanren, well-explained]]

* Appendix: The Problem of Search

Consider the game of Sudoku: Given a 9x9 grid, fill in the blanks such that:

- Every row has only one ocurrence of 1-9
- Same with every column
- Same with every 3x3 square in the grid

Consider the ideal of functional programming

- Deal with immutable, lazy, structures
- The solution should be as complex as the problem, not more (declarative)
- I.e. the /what/ should be unencumbered by the /how/
- Have your cake and eat it too: declarativeness should be *performant*.

* A declarative solution

A bit terse, but close to how we'd describe the solution:

#+begin_src clojure :results output

(require '[sentient-brown-bag.sudoku :as h])

(h/pprint-board h/example-board)

(defn solve-sudoku
  ;; given a board
  [board] 
  ;; get the first position found, if any
  (if-let [[i & _] 
           ;; is there at least one empty cell?
           (and (some  '#{-} board)  
                ;; find all positions for empty cells
                (h/pos '#{-} board))] 
    (flatten (map #(solve-sudoku (assoc board i %)) 
                  ;; get all possible numbers for this position
                  (h/possible-placements board i))) 
    ;; no empty positions were found, return the board untouched
    board)) 

;; pipe the sample board into the solver, and print the result
(time (-> h/example-board solve-sudoku h/pprint-board))

#+end_src

#+RESULTS:
#+begin_example
-------------------------------
| 3  -  - | -  -  5 | -  1  - | 
| -  7  - | -  -  6 | -  3  - | 
| 1  -  - | -  9  - | -  -  - | 
-------------------------------
| 7  -  8 | -  -  - | -  9  - | 
| 9  -  - | 4  -  8 | -  -  2 | 
| -  6  - | -  -  - | 5  -  1 | 
-------------------------------
| -  -  - | -  4  - | -  -  6 | 
| -  4  - | 7  -  - | -  2  - | 
| -  2  - | 6  -  - | -  -  3 | 
-------------------------------
-------------------------------
| 3  8  6 | 2  7  5 | 4  1  9 | 
| 4  7  9 | 8  1  6 | 2  3  5 | 
| 1  5  2 | 3  9  4 | 8  6  7 | 
-------------------------------
| 7  3  8 | 5  2  1 | 6  9  4 | 
| 9  1  5 | 4  6  8 | 3  7  2 | 
| 2  6  4 | 9  3  7 | 5  8  1 | 
-------------------------------
| 8  9  3 | 1  4  2 | 7  5  6 | 
| 6  4  1 | 7  5  3 | 9  2  8 | 
| 5  2  7 | 6  8  9 | 1  4  3 | 
-------------------------------
"Elapsed time: 688.035194 msecs"
#+end_example

Time permitting, we can explore the [[file:src/sentient_brown_bag/sudoku.clj][ancillary functions]] necessary.


* Some notes on the small details:

#+begin_src clojure :results output
(comment 
  (some #{1 2 3} [3 4 5 6])
  (some '#{-} '[1 - - 2])
  (some '#{-} '[1 2 3 4])
  (and [1 2 3] [1 2])
  (and nil (repeat 1))
  (assoc '[:a :b - :d] 2 :c)
  (if-let [[i & _] [4 3 2]] i :empty)
  (if-let [[i & _] nil] i :empty))


#+end_src


* The sad truth

- The declarative version, although very unencumbered by minutia... could be slow
- It recursively explores a potentially infinite space!
- Worst case, it's suboptimal in space and time complexity!
- Maybe we should just give up and do it in C?

* A logic solution

#+begin_src clojure :results output

(require '[sentient-brown-bag.sudoku :as h])
(require '[clojure.core.logic :as logic])
(require '[clojure.core.logic.fd :as fd])

(h/pprint-board h/example-board)

(defn solve-sudoku-logically [board]
  (let [legal-nums (fd/interval 1 9)
        lvars (h/logic-board)
        rows  (h/rowify lvars)
        cols  (h/colify rows)
        grids (h/subgrid rows)]
    (logic/run 1 [q]
      (h/init lvars board)
      (logic/everyg #(fd/in % legal-nums) lvars)
      (logic/everyg fd/distinct rows)
      (logic/everyg fd/distinct cols)
      (logic/everyg fd/distinct grids)
      (logic/== q lvars))))

;; pipe the sample board into the solver, and print the result
(time (-> h/example-board solve-sudoku-logically first h/pprint-board))

#+end_src

#+RESULTS:
#+begin_example
-------------------------------
| 3  -  - | -  -  5 | -  1  - | 
| -  7  - | -  -  6 | -  3  - | 
| 1  -  - | -  9  - | -  -  - | 
-------------------------------
| 7  -  8 | -  -  - | -  9  - | 
| 9  -  - | 4  -  8 | -  -  2 | 
| -  6  - | -  -  - | 5  -  1 | 
-------------------------------
| -  -  - | -  4  - | -  -  6 | 
| -  4  - | 7  -  - | -  2  - | 
| -  2  - | 6  -  - | -  -  3 | 
-------------------------------
-------------------------------
| 3  8  6 | 2  7  5 | 4  1  9 | 
| 4  7  9 | 8  1  6 | 2  3  5 | 
| 1  5  2 | 3  9  4 | 8  6  7 | 
-------------------------------
| 7  3  8 | 5  2  1 | 6  9  4 | 
| 9  1  5 | 4  6  8 | 3  7  2 | 
| 2  6  4 | 9  3  7 | 5  8  1 | 
-------------------------------
| 8  9  3 | 1  4  2 | 7  5  6 | 
| 6  4  1 | 7  5  3 | 9  2  8 | 
| 5  2  7 | 6  8  9 | 1  4  3 | 
-------------------------------
"Elapsed time: 35.070744 msecs"
#+end_example
